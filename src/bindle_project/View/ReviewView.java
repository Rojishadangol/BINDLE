/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package bindle_project.View;
import bindle_project.Controller.ReviewController;
import bindle_project.Model.Review;
import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.*;
import java.time.format.DateTimeFormatter;
import java.util.List;
/**
 *
 * @author acer
 */
public class ReviewView extends javax.swing.JPanel {

    /**
     * Creates new form ReviewView
     */
    public ReviewView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables


    private ReviewController controller;

    private JTextArea reviewsArea;
    private JComboBox<Integer> ratingComboBox;
    private JTextArea commentArea;
    private JButton submitButton;
    private JButton deleteButton;
    private JLabel avgRatingLabel;
    private JLabel messageLabel;

    private String currentUsername;
    private String currentBookISBN;

    public ReviewView(ReviewController controller, String username, String bookISBN) {
        this.controller = controller;
        this.currentUsername = username;
        this.currentBookISBN = bookISBN;

        setLayout(new BorderLayout(10, 10));

        // Average rating display
        avgRatingLabel = new JLabel("Average Rating: N/A");
        add(avgRatingLabel, BorderLayout.NORTH);

        // Reviews display area
        reviewsArea = new JTextArea(10, 50);
        reviewsArea.setEditable(false);
        JScrollPane reviewsScroll = new JScrollPane(reviewsArea);
        reviewsScroll.setBorder(new TitledBorder("Reviews"));
        add(reviewsScroll, BorderLayout.CENTER);

        // Input panel for rating and comment
        JPanel inputPanel = new JPanel(new BorderLayout(5, 5));
        JPanel ratingPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        ratingPanel.add(new JLabel("Your Rating:"));
        ratingComboBox = new JComboBox<>(new Integer[]{1,2,3,4,5});
        ratingPanel.add(ratingComboBox);
        inputPanel.add(ratingPanel, BorderLayout.NORTH);

        commentArea = new JTextArea(4, 50);
        commentArea.setBorder(new TitledBorder("Your Review"));
        inputPanel.add(new JScrollPane(commentArea), BorderLayout.CENTER);

        // Buttons panel
        JPanel buttonsPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        submitButton = new JButton("Submit Review");
        deleteButton = new JButton("Delete Review");
        buttonsPanel.add(deleteButton);
        buttonsPanel.add(submitButton);
        inputPanel.add(buttonsPanel, BorderLayout.SOUTH);

        add(inputPanel, BorderLayout.SOUTH);

        messageLabel = new JLabel(" ");
        messageLabel.setForeground(Color.RED);
        add(messageLabel, BorderLayout.PAGE_END);

        // Button actions
        submitButton.addActionListener(e -> submitReview());
        deleteButton.addActionListener(e -> deleteReview());

        loadReviews();
    }

    private void submitReview() {
        int rating = (Integer) ratingComboBox.getSelectedItem();
        String comment = commentArea.getText().trim();
        if (comment.isEmpty()) {
            showMessage("Please enter a review comment.", true);
            return;
        }
        controller.submitReview(currentUsername, currentBookISBN, rating, comment);
    }

    private void deleteReview() {
        controller.deleteReview(currentUsername, currentBookISBN);
    }

    public void loadReviews() {
        List<Review> reviews = controller.getReviews(currentBookISBN);
        StringBuilder sb = new StringBuilder();
        DateTimeFormatter fmt = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");
        for (Review r : reviews) {
            sb.append(String.format("%s (%d stars) on %s:%n%s%n%n",
                    r.getUsername(), r.getRating(), r.getDate().format(fmt), r.getComment()));
        }
        reviewsArea.setText(sb.toString());

        double avg = controller.getAverageRating(currentBookISBN);
        avgRatingLabel.setText(String.format("Average Rating: %.2f / 5", avg));

        // Load user's existing review if any
        Review userReview = controller.getUserReview(currentUsername, currentBookISBN);
        if (userReview != null) {
            ratingComboBox.setSelectedItem(userReview.getRating());
            commentArea.setText(userReview.getComment());
        } else {
            ratingComboBox.setSelectedItem(5);
            commentArea.setText("");
        }
        showMessage(" ", false);
    }

    public void showMessage(String msg, boolean isError) {
        messageLabel.setText(msg);
        messageLabel.setForeground(isError ? Color.RED : new Color(0, 128, 0));
    }
}



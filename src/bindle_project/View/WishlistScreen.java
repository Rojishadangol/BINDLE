/*
 * Click nbps://nbsp/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbps://nbsp/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/*
 * Click nbps://nbsp/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbps://nbsp/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package bindle_project.View;

import bindle_project.Model.WishlistModel;
import bindle_project.Model.Book;
import bindle_project.Controller.WishlistController;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.ListSelectionModel;
import java.awt.BorderLayout;
import java.awt.Component;
import javax.swing.JPanel;

/**
 *
 * @author ACER
 */
public class WishlistScreen extends javax.swing.JFrame {

    private WishlistModel model;
    private WishlistController controller;
    private DefaultListModel<Book> listModel;
    private JList<Book> wishlistList;
    private JButton removeButton;
    private JButton backButton;

    /**
     * Creates new form WishlistScreen
     */
    public WishlistScreen(WishlistModel model) {
        this.model = model;
        this.controller = new WishlistController(model, null); // Null view since we're handling logic here
        initComponents();
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null); // Center the window
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold desc="Generated Code">                          
    private void initComponents() {
        listModel = new DefaultListModel<>();
        wishlistList = new JList<>(listModel);
        wishlistList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        wishlistList.setCellRenderer(new BookListCellRenderer());
        JScrollPane scrollPane = new JScrollPane(wishlistList);

        removeButton = new JButton("Remove from Wishlist");
        backButton = new JButton("Back to Home");

        JPanel buttonPanel = new JPanel();
        buttonPanel.add(removeButton);
        buttonPanel.add(backButton);

        getContentPane().setLayout(new BorderLayout());
        getContentPane().add(new JLabel("My Wishlist", JLabel.CENTER), BorderLayout.NORTH);
        getContentPane().add(scrollPane, BorderLayout.CENTER);
        getContentPane().add(buttonPanel, BorderLayout.SOUTH);

        refreshWishlist();

        // Remove book from wishlist
        removeButton.addActionListener(e -> {
            Book selected = wishlistList.getSelectedValue();
            if (selected != null) {
                if (controller.removeBookFromWishlist(selected)) {
                    refreshWishlist();
                    JOptionPane.showMessageDialog(this, "Book removed successfully.");
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to remove book.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please select a book to remove.");
            }
        });

        // Back to Home action
        backButton.addActionListener(e -> {
            this.dispose();
            new HomeScreen().setVisible(true);
        });

        pack();
    } // </editor-fold>                        

    private void refreshWishlist() {
        listModel.clear();
        for (Book book : model.getWishlistBooks()) {
            listModel.addElement(book);
        }
    }

    // Custom renderer to show book title, author, price, and condition
    private static class BookListCellRenderer extends DefaultListCellRenderer {
        @Override
        public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            JLabel label = (JLabel) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);

            if (value instanceof Book) {
                Book book = (Book) value;
                label.setText(book.getTitle() + " by " + book.getAuthor() + " (Rs. " + book.getPrice() + ", " + book.getCondition() + ")");
            }

            return label;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold desc=" Look and feel setting code (optional) ">
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WishlistScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WishlistScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WishlistScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WishlistScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                // Placeholder model - replace with actual implementation
                WishlistModel model = new WishlistModel(null, null); // Replace with actual User and Connection
                new WishlistScreen(model).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    // End of variables declaration                   
}
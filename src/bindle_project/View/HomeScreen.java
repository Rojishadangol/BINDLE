/*

 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package bindle_project.View;

import bindle_project.Controller.Listcontroller;
import bindle_project.Model.User;
import bindle_project.Model.WishlistModel;
import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.print.Book;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;

/**
 *
 * @author ACER
 */
public class HomeScreen extends javax.swing.JFrame {
    private Listcontroller listController;
public void updateCartDisplay(int itemCount) {
        // Update UI to reflect cart size (e.g., label or badge)
        System.out.println("Cart updated. Items: " + itemCount); // Placeholder, replace with actual UI update
    }
    /**
     * Creates new form HomeScreen
     */
    public HomeScreen() {
        initComponents(); // Ensure components are initialized first
        User currentUser = new User(1, "user@example.com", "password123", "Test User", false); // Placeholder
        this.listController = new Listcontroller(currentUser);
        System.out.println("HomeScreen initialized. Sell: " + (sell != null ? "not null" : "null") + ", Logout: " + (Logout != null ? "not null" : "null") + ", SearchButton: " + (SearchButton != null ? "not null" : "null"));
       SearchButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                navigateToSearch();
            }
        });
        HeartButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                navigateToWishlist();
            }
        });
        CartButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                navigateToCart();
            }
        });
        profile.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                navigateToLogin();
            }
        });
//        sell.addActionListener(new ActionListener() {
//            @Override
//            public void actionPerformed(ActionEvent e) {
//                navigateToSeller();
//            }
//        });
        Logout.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.out.println("Logging out and exiting application");
                System.exit(0); // Exit the application
            }
        });
        availablebooks.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                navigateToListing();
            }
        });

        // Align searchTextField action with SearchButton
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelLogo = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        labelLogoTitle = new javax.swing.JLabel();
        labelLogoSubTitle = new javax.swing.JLabel();
        labelBooks = new javax.swing.JLabel();
        labelForAll = new javax.swing.JLabel();
        labelShopNow = new javax.swing.JLabel();
        SearchButton = new javax.swing.JButton();
        Logout = new javax.swing.JButton();
        profile = new javax.swing.JButton();
        sell = new javax.swing.JButton();
        HeartButton = new javax.swing.JButton();
        CartButton = new javax.swing.JButton();
        availablebooks = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        labelLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Bindle_Images/BindleBook.png"))); // NOI18N
        labelLogo.setText("jLabel1");
        getContentPane().add(labelLogo, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 28, 62, 40));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Bindle_Images/HomeScreenBookshelf.png"))); // NOI18N
        jLabel1.setText("Search");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 100, 310, 400));

        labelLogoTitle.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        labelLogoTitle.setText("Bindle");
        getContentPane().add(labelLogoTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 20, 200, 50));

        labelLogoSubTitle.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        labelLogoSubTitle.setText("Reselling academic and non academic books ");
        getContentPane().add(labelLogoSubTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 60, 280, -1));

        labelBooks.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        labelBooks.setText("B00KS");
        getContentPane().add(labelBooks, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 170, 210, 50));

        labelForAll.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        labelForAll.setText("F0R ALL");
        getContentPane().add(labelForAll, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 210, 250, -1));

        labelShopNow.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        labelShopNow.setText("SHOP NOW");
        labelShopNow.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        labelShopNow.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelShopNowMouseClicked(evt);
            }
        });
        getContentPane().add(labelShopNow, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 270, 140, 50));

        SearchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Bindle_Images/SearchIcon.png"))); // NOI18N
        SearchButton.setText("Search");
        SearchButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SearchButtonMouseClicked(evt);
            }
        });
        getContentPane().add(SearchButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 30, 140, -1));

        Logout.setText("LogOut");
        getContentPane().add(Logout, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 80, -1, -1));

        profile.setText("Profile");
        getContentPane().add(profile, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 80, 75, -1));

        sell.setText("Sell");
        sell.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sellActionPerformed(evt);
            }
        });
        getContentPane().add(sell, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 30, 75, 40));

        HeartButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/mylist.png"))); // NOI18N
        HeartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HeartButtonActionPerformed(evt);
            }
        });
        getContentPane().add(HeartButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 30, -1, -1));

        CartButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/CART.png"))); // NOI18N
        getContentPane().add(CartButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 30, -1, 40));

        availablebooks.setText("Available books");
        getContentPane().add(availablebooks, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 80, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void labelShopNowMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelShopNowMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_labelShopNowMouseClicked

    private void sellActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sellActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sellActionPerformed

    private void HeartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HeartButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_HeartButtonActionPerformed

    private void SearchButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SearchButtonMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_SearchButtonMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomeScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomeScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomeScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomeScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomeScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomeScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomeScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomeScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HomeScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CartButton;
    private javax.swing.JButton HeartButton;
    private javax.swing.JButton Logout;
    private javax.swing.JButton SearchButton;
    private javax.swing.JButton availablebooks;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel labelBooks;
    private javax.swing.JLabel labelForAll;
    private javax.swing.JLabel labelLogo;
    private javax.swing.JLabel labelLogoSubTitle;
    private javax.swing.JLabel labelLogoTitle;
    private javax.swing.JLabel labelShopNow;
    private javax.swing.JButton profile;
    private javax.swing.JButton sell;
    // End of variables declaration//GEN-END:variables
//public void displaySearchResults(List<Book> books) {
//        JPanel resultsPanel = new JPanel(new GridLayout(books.size(), 1));
//        for (Book book : books) {
//            JLabel label = new JLabel(book.getTitle() + " by " + book.getAuthor() + " - $" + book.getPrice());
//            resultsPanel.add(label);
//        }
//        add(new JScrollPane(resultsPanel), BorderLayout.CENTER);
//        revalidate();
//        repaint();
//    }

    @Override
    public void setVisible(boolean visible) {
        super.setVisible(visible);
    }
    public javax.swing.JButton getSearchButton() {
        return SearchButton;
    }
    public javax.swing.JButton getHeartButton(){
    return HeartButton;}
     public javax.swing.JButton getCartButton(){
    return CartButton;}
     

   
    public javax.swing.JButton getLogoutButton(){
    return Logout;}
     public javax.swing.JButton getSellButton(){
    return sell;}
     
   private void navigateToWishlist() {
        System.out.println("Attempting to navigate to Wishlist");
        try {
            Connection connection = getDbConnection();
            if (connection != null) {
                // Use a valid User constructor with placeholder values
                User currentUser = new User(1, "user@example.com", "password123", "Test User", false); // Placeholder User
                WishlistModel model = new WishlistModel(currentUser, connection);
                WishlistScreen wishlist = new WishlistScreen(model);
                System.out.println("WishlistScreen created successfully");
                wishlist.setVisible(true);
                System.out.println("WishlistScreen set visible");
                this.setVisible(false);
            } else {
                System.out.println("Database connection failed, cannot navigate to Wishlist");
            }
        } catch (Exception e) {
            System.out.println("Error navigating to Wishlist: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private Connection getDbConnection() {
        System.out.println("Attempting to connect to database...");
        try {
            String url = "jdbc:mysql://localhost:3306/JavaProjectBindle"; // Ensure this matches your setup
            String user = "root"; // Default MySQL username, adjust if changed
            String password = "roji@123"; // Default password might be empty, adjust if set
            System.out.println("Using URL: " + url + ", User: " + user);
            Connection conn = DriverManager.getConnection(url, user, password);
            System.out.println("Database connection established successfully");
            return conn;
        } catch (SQLException e) {
            System.out.println("Failed to connect to database: " + e.getMessage());
            e.printStackTrace();
            return null;
        }
    }
   private void navigateToCart() {
    System.out.println("Attempting to navigate to Cart");
    try {
        User currentUser = new User(1, "user@example.com", "password123", "Test User", false); // Placeholder
        CartScreen cart = new CartScreen(currentUser); // Pass user
        System.out.println("CartScreen created successfully");
        cart.setVisible(true);
        System.out.println("CartScreen set visible");
        this.setVisible(false);
    } catch (Exception e) {
        System.out.println("Error navigating to Cart: " + e.getMessage());
        e.printStackTrace();
    }
}
    private void navigateToLogin() {
        System.out.println("Attempting to navigate to Login");
        try {
            LoginInterfacee login = new LoginInterfacee(); // Replace with your actual LoginScreen class
            System.out.println("LoginScreen created successfully");
            login.setVisible(true);
            System.out.println("LoginScreen set visible");
            this.setVisible(false);
        } catch (Exception e) {
            System.out.println("Error navigating to Login: " + e.getMessage());
            e.printStackTrace();
        }
    }
   public void navigateToSearch() {
        System.out.println("Attempting to navigate to Search from HomeScreen");
        Connection conn = getDbConnection();
        if (conn != null) {
            try {
                search searchScreen = new search();
                System.out.println("Search screen instance created: " + (searchScreen != null ? "success" : "failure"));
                searchScreen.setVisible(true);
                System.out.println("Search screen set visible");
                this.setVisible(false);
            } catch (Exception e) {
                System.out.println("Error creating or showing Search screen: " + e.getMessage());
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error navigating to Search: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Database connection failed. Cannot navigate to Search.");
        }
    }

//    private void navigateToSeller() {
//        System.out.println("Attempting to navigate to Seller");
//        try {
//            SellerScreen seller = new SellerScreen(); // Replace with your actual SellerScreen class
//            System.out.println("SellerScreen created successfully");
//            seller.setVisible(true);
//            System.out.println("SellerScreen set visible");
//            this.setVisible(false);
//        } catch (Exception e) {
//            System.out.println("Error navigating to Seller: " + e.getMessage());
//            e.printStackTrace();
//        }
//    }
   private void navigateToListing() {
    Listing listingScreen = new Listing();
    listingScreen.setVisible(true);
    this.dispose(); // Optional: close HomeScreen
}
     
}
